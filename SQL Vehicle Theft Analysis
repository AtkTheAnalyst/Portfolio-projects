-- Skills used: Joins, Subqueries, CTEs, Aggregate functions, Group by, Data filtering & sorting techniques, Pivoting data with case when.
 

USE stolen_vehicles_db;

select *
from locations;

select *
from make_details;

select *
from stolen_vehicles;

-- Objective 1
-- Identify when vehicles are likely to be stolen
-- Your first objective is to explore the vehicle and date fields in the stolen_vehicles table to identify when vehicles tend to be stolen.

-- Find the number of vehicles stolen each year
select 
		count(vehicle_id) as num_of_vehicles,
        year(date_stolen) as yearr
from stolen_vehicles
group by yearr;

-- ans:  2021: 1668, 2022: 2885
-- it looks like there were more vehicles stolen in 2022


-- Find the number of vehicles stolen each month

select
		count(vehicle_id) as num_of_vehicles,
        month(date_stolen) as monthh
from stolen_vehicles
group by monthh;
-- it looks like were missing some months in our records
-- we only have data for a few months of the year
-- lets confirm this by looking at the year simulatenously

select
		count(vehicle_id) as num_of_vehicles,
        month(date_stolen) as monthh,
        year(date_stolen) as yearr
from stolen_vehicles
group by monthh, yearr
order by yearr, monthh;

-- we can see that for 2021, we only have 3 months worth of data and for 2022, we only have 4 months worth of data
-- in other news, if we look at number of vehicles stolen, it looks like its increasing this whole time,
-- and then suddenly it decreases drastically at month 4 of 2022
-- so lets take  a look at why this is so
select
		count(vehicle_id) as num_of_vehicles,
        month(date_stolen) as monthh,
        year(date_stolen) as yearr,
        day(date_stolen) as dayy
from stolen_vehicles
where month(date_stolen) = 4
group by monthh, yearr, dayy
order by yearr, monthh, dayy;
-- we see that for the month of april, we only have 6 days worth of data so thats why
-- that count was so low

-- conclusively, it looks like as the months go on, there are more and more vehicles stolen
-- and we have to remember that April is an anomaly because we only have 6 days worth of data
-- one thing that we know is that in NewZealand, the summer time is the december to march months
-- and it seems like there are more vehicles being stolen in the december to march months

-- Find the number of vehicles stolen each day of the week
select
		count(vehicle_id) as num_of_vehicles,
        dayofweek(date_stolen) as dayy
from stolen_vehicles
group by dayy
order by dayy;

-- Replace the numeric day of week values with the full name of each day of the week (Sunday, Monday, Tuesday, etc.)
SELECT 
    COUNT(vehicle_id) AS num_of_vehicles,
    DAYNAME(date_stolen) AS day_of_week
FROM 
    stolen_vehicles
GROUP BY 
    day_of_week
order by 
	day_of_week;
-- it seems like vehicle theft happens more frequently on monday, followed by tuesday
-- it drops mid week and then picks up again on friday

    
-- Create a bar chart that shows the number of vehicles stolen on each day of the week

SELECT 
    COUNT(vehicle_id) AS num_of_vehicles,
    DAYNAME(date_stolen) AS day_of_week_stolen
FROM 
    stolen_vehicles
GROUP BY 
    day_of_week_stolen
order by  
	FIELD(day_of_week_stolen, 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday');
#data downloaded for tableau



-- Objective 2
-- Identify which vehicles are likely to be stolen
-- Your second objective is to explore the vehicle type, age, luxury vs standard and color fields in the stolen_vehicles table to identify which vehicles are most likely to be stolen.

select *
from stolen_vehicles;

select *
from make_details;

-- Find the vehicle types that are most often and least often stolen
select
	vehicle_type,
    count(vehicle_id) as num_of_vehicles
from stolen_vehicles
group by vehicle_type
order by num_of_vehicles desc
limit 5;

-- It looks like stationwagon, Saloon, Hatchback, Trailer, and Utility are the most commonly stolen 
-- vehicles in NewZealnd
select
	vehicle_type,
    count(vehicle_id) as num_of_vehicles
from stolen_vehicles
group by vehicle_type
order by num_of_vehicles asc
limit 5;

-- The least commonly stolen are Articulated Truck, Special Purpose vehicle, Mobile Mahcine,
-- Trail Bike, Tractor


-- For each vehicle type, find the average age of the cars that are stolen
select 
	vehicle_type, 
    avg(year(date_stolen) - model_year) as avg_age_of_cars_stolen
from stolen_vehicles
group by vehicle_type
order by avg_age_of_cars_stolen desc;


-- For each vehicle type, find the percent of vehicles stolen that are luxury versus standard

with lux_standard as 
(select 
	vehicle_type, 
    case when make_type = 'Luxury' then 1 else 0 end as luxury
from stolen_vehicles sv 
	left join make_details md on sv.make_id = md.make_id)
    
    #lux_standrad is now a common table expression that we can work with as an independent table
    #CTE
select *
from lux_standard;

#now we can answer the main question
WITH lux_standard AS 
(
    SELECT 
        vehicle_type, 
        CASE WHEN make_type = 'Luxury' THEN 1 ELSE 0 END AS luxury_or_standard
    FROM 
        stolen_vehicles sv 
    LEFT JOIN 
        make_details md ON sv.make_id = md.make_id
)
SELECT 
    vehicle_type,
    SUM(luxury_or_standard) / COUNT(*) * 100 AS percent_of_lux_vs_standard
FROM 
    lux_standard
GROUP BY 
    vehicle_type
ORDER BY 
    percent_of_lux_vs_standard DESC;

-- Create a table where the rows represent the top 10 vehicle types, the columns represent the top 7 vehicle colors (plus 1 column for all other colors) and the values are the number of vehicles stolen
select color,
	   count(vehicle_id) as num_vehicles
from stolen_vehicles
group by color
order by num_vehicles desc;

select vehicle_type, count(vehicle_id) as num_vehicles,
	sum(case when color = 'Silver' then 1 else 0 end) as silver,
    sum(case when color = 'White' then 1 else 0 end) as white,
    sum(case when color = 'Black' then 1 else 0 end) as black,
    sum(case when color = 'Blue' then 1 else 0 end) as blue,
    sum(case when color = 'Red' then 1 else 0 end) as red,
    sum(case when color = 'Grey' then 1 else 0 end) as Grey,
    sum(case when color = 'Green' then 1 else 0 end) as green,
    sum(case when color in ('Gold', 'Brown', 'Yellow', 'Orange', 'Purple', 'Cream', 'Pink') then 1 else 0 end) as Other
from stolen_vehicles
group by vehicle_type
order by num_vehicles desc
limit 10;
       

-- Create a heat map of the table comparing the vehicle types and colors
#dowload the data and upload it to tableau or excel




-- Objective 3
-- Identify where vehicles are likely to be stolen
-- Your third objective is to explore the population and density statistics in the regions table to identify where vehicles are getting stolen, and visualize the results using a scatter plot and map.

-- Find the number of vehicles that were stolen in each region
select * 
from locations;

select *
from stolen_vehicles;

select
	lo.region,
	count(vehicle_id) as num_of_vehicles_stolen
from stolen_vehicles sv
		left join locations lo on lo.location_id = sv.location_id
group by lo.region
order by num_of_vehicles_stolen desc;

#we can see that auckland is leading in number of vehciles stolen
#it also has the largest population compared to the other regions

-- Combine the previous output with the population and density statistics for each region
select
	lo.region,
    lo.population,
    lo.density,
	count(vehicle_id) as num_of_vehicles_stolen
from stolen_vehicles sv
		left join locations lo on lo.location_id = sv.location_id
group by lo.region, lo.population, lo.density
order by num_of_vehicles_stolen  desc;
#southland has the lest num of b=vehicles stolen and the least population

-- Do the types of vehicles stolen in the three most dense regions differ from the three least dense regions?
-- first, order by density to find the three most dense and least dense 
select
	lo.region,
    lo.population,
    lo.density,
	count(vehicle_id) as num_of_vehicles_stolen
from stolen_vehicles sv
		left join locations lo on lo.location_id = sv.location_id
group by lo.region, lo.population, lo.density
order by lo.density  desc;

-- #most dense regions
-- 'Auckland	1695200	343.09	1638'
-- 'Nelson	54500	129.15	92'
-- 'Wellington	543500	67.52	420'

-- #least dense regions
-- 'Otago	246000	7.89	139'
-- 'Gisborne	52100	6.21	176'
-- 'Southland	102400	3.28	26'

(select 'Low Density',
	sv.vehicle_type,
    count(sv.vehicle_type) as num_vehicles
from stolen_vehicles sv
	left join locations lo on lo.location_id = sv.location_id
where 
	lo.region in ('Otago', 'Gisborn', 'Southland')
group by sv.vehicle_type
order by num_vehicles desc)
UNION
(select 'High Density',
	sv.vehicle_type,
    count(sv.vehicle_type) as num_vehicles
from stolen_vehicles sv
	left join locations lo on lo.location_id = sv.location_id
where 
	lo.region in ('Auckland', 'Nelson', 'Wellington')
group by sv.vehicle_type
order by num_vehicles desc);



#yes, utility, stationwagon and Light van are the three vehciles in the least dense region
#while Trailer, Boat Trailer, and convertible are the three vehicles in the most dense region

-- Create a scatter plot of population versus density, and change the size of the points based on the number of vehicles stolen in each region
select 
	lo.population,
    lo.density
from stolen_vehicles sv
		left join locations lo on lo.location_id = sv.location_id
;
#downloaded data

-- Create a map of the regions and color the regions based on the number of stolen vehicles
select 
	lo.region,
    sv.vehicle_id
from stolen_vehicles sv
		left join locations lo on lo.location_id = sv.location_id
group by sv.vehicle_id, lo.region
;

select 
	lo.region,
    count(sv.vehicle_id) as num_stolen_vehicles
from stolen_vehicles sv
		left join locations lo on lo.location_id = sv.location_id
group by lo.region
;


